@page "/darts501"
@inject HttpClient Http

<h1>501</h1>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    const int sectorsCount = 20;
    const double circleLength = Math.PI * 2;
    const double step = circleLength / sectorsCount;
    const double multiplier = 1;

    <div class="dartsboard">
        @for (var i = 0; i < sectorsCount; i++)
        {
            <div class="dartsboard-sector" style="transform: rotate(@(step * i)rad)">
                @*<div class="dartsboard-segment dartsboard-segment-inner"></div>
                <div class="dartsboard-segment dartsboard-segment-treble"></div>
                <div class="dartsboard-segment dartsboard-segment-outer"></div>
                <div class="dartsboard-segment dartsboard-segment-double"></div>*@
                <svg viewBox="0 0 136 400" width="100%" height="100%">
                    <path d="M0,0 L136,0 L75,400 L55,400z" fill="gray" opacity="0.5"/>
                </svg>
            </div>
        }

        @*<div class="dartsboard-circle bull-circle"></div>
        <div class="dartsboard-circle quarter-circle"></div>
        <div class="dartsboard-circle inner-circle"></div>
        <div class="dartsboard-circle treble-circle"></div>
        <div class="dartsboard-circle outer-circle"></div>
        <div class="dartsboard-circle double-circle"></div>*@
    </div>

    @*<div style="width: 40px; height: 200px; background-color: gray; transform: perspective(100px) rotate3d(0,0,0,45deg)"></div>

        <div class="dartsboard">
            @for (var i = 0; i < sectorsCount; i++)
            {
                var xAngle = Math.Cos(step * i) * -multiplier;
                var yAngle = Math.Sin(step * i) * -multiplier;
                var zAngle = step * i;

                <div class="dartsboard-sector" style="transform: perspective(100px) rotateX(@(xAngle)rad) rotateY(@(yAngle)rad) rotateZ(@(zAngle)rad)">

                </div>
            }
        </div>*@
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
