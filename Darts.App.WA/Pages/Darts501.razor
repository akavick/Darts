@page "/darts501"
@inject HttpClient Http



<h1>@(_clickResult)</h1>

<div class="dartsboard">
    <svg width="100%" height="100%" viewBox="0 0 @(BoardRadius * 2) @(BoardRadius * 2)">
        @for (var i = 0; i < SectorsCount; i++)
        {
            var isOdd = (i & 1) == 1;

            for (var j = 1; j <= _distances.Length - 3; j++)
            {
                var isBonus = (j & 1) == 1;
                var (oR, oC) = _distances[j];
                var (iR, iC) = _distances[j + 1];
                var multiplier = j switch { 1 => 2, 3 => 3, _ => 1 };
                var sectorValue = _sectorsValues[i] * multiplier;

                <path d="M@(BoardRadius - oC * 0.5) @(BoardRadius - oR + (oR - Math.Sqrt(oR * oR - oC * oC * 0.25)))
                         A@(oR) @(oR) 0 0 1 @(BoardRadius + oC * 0.5) @(BoardRadius - oR + (oR - Math.Sqrt(oR * oR - oC * oC * 0.25)))
                         L@(BoardRadius + iC * 0.5) @(BoardRadius - iR + (iR - Math.Sqrt(iR * iR - iC * iC * 0.25)))
                         A@(iR) @(iR) 0 0 0 @(BoardRadius - iC * 0.5) @(BoardRadius - iR + (iR - Math.Sqrt(iR * iR - iC * iC * 0.25)))z"
                      fill="@(isOdd
                                ? isBonus
                                    ? OddBonusColor
                                    : OddColor
                                : isBonus
                                    ? EvenBonusColor
                                    : EvenColor)"
                      opacity="@(Opacity)"
                      transform="rotate(@(StepDeg * i) @(BoardRadius) @(BoardRadius))"
                      @onclick="@(() => _clickResult = sectorValue)" />
            }
        }

        <circle cx="@(BoardRadius)"
                cy="@(BoardRadius)"
                r="@(BullInnerRadius + (BullOuterRadius - BullInnerRadius) * 0.5)"
                stroke="@(OddBonusColor)"
                fill="none"
                stroke-width="@(BullOuterRadius - BullInnerRadius)"
                opacity="@(Opacity)"
                @onclick="@(() => _clickResult = BullValue)" />

        <circle cx="@(BoardRadius)"
                cy="@(BoardRadius)"
                r="@(BullInnerRadius)"
                fill="@(EvenBonusColor)"
                opacity="@(Opacity)"
                @onclick="@(() => _clickResult = BullValue * 2)" />

        @for (var i = 0; i < _sectorsValues.Length; i++)
        {
            <line x1="@(BoardRadius)"
                  x2="@(BoardRadius)"
                  y1="@(Start)"
                  y2="@(BoardRadius - BullOuterRadius)"
                  stroke="@(SpiderColor)"
                  fill="@(SpiderColor)"
                  stroke-width="@(SpiderThickness)"
                  transform="rotate(@(StepDeg * i + StepDeg * 0.5) @(BoardRadius) @(BoardRadius))" />
        }

        @for (var j = 1; j < _distances.Length; j++)
        {
            <circle cx="@(BoardRadius)"
                    cy="@(BoardRadius)"
                    r="@(_distances[j].R)"
                    stroke="@(SpiderColor)"
                    fill="none"
                    stroke-width="@(SpiderThickness)" />
        }
    </svg>
</div>



@code {
    private const int BullValue = 25, 
                      SectorsCount = 20;
    
    private const double StepDeg = 360.0 / SectorsCount,
                         StepRad = Math.PI * 2 / SectorsCount,
                         SpiderThickness = 2.0,
                         Opacity = 0.8,
                         Start = 0.0,
                         BoardRadius = 500.0,
                         DoublesOuterRadius = 480.0,
                         DoublesInnerRadius = 430.0,
                         TreblesOuterRadius = 320.0,
                         TreblesInnerRadius = 270.0,
                         BullOuterRadius = 70.0,
                         BullInnerRadius = 30.0;

    private const string SpiderColor = "silver",
                         OddColor = "white",
                         EvenColor = "black",
                         OddBonusColor = "green",
                         EvenBonusColor = "red";

    private readonly int[] _sectorsValues = { 20, 1, 18, 4, 13, 6, 10, 15, 2, 17, 3, 19, 7, 16, 8, 11, 14, 9, 12, 5 };
    
    private readonly (double R, double C)[] _distances = 
    {
        ( R: BoardRadius,        C: BoardRadius        * 2 * Math.Sin(StepRad * 0.5)),
        ( R: DoublesOuterRadius, C: DoublesOuterRadius * 2 * Math.Sin(StepRad * 0.5)), 
        ( R: DoublesInnerRadius, C: DoublesInnerRadius * 2 * Math.Sin(StepRad * 0.5)), 
        ( R: TreblesOuterRadius, C: TreblesOuterRadius * 2 * Math.Sin(StepRad * 0.5)), 
        ( R: TreblesInnerRadius, C: TreblesInnerRadius * 2 * Math.Sin(StepRad * 0.5)), 
        ( R: BullOuterRadius,    C: BullOuterRadius    * 2 * Math.Sin(StepRad * 0.5)),
        ( R: BullInnerRadius,    C: BullInnerRadius    * 2 * Math.Sin(StepRad * 0.5))
    };
    
    private int _clickResult;

    protected override async Task OnInitializedAsync()
    {
        
    }

    //public class WeatherForecast
    //{
    //    public DateTime Date { get; set; }

    //    public int TemperatureC { get; set; }

    //    public string Summary { get; set; }

    //    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    //}
}
